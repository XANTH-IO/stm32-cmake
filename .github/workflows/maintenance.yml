name: Maintenance

run-name: "Nightly maintenance workflow"

on:
  push
  # schedule:
  #   - cron: '17 4 * * *'

permissions:
  pull-requests: write
  issues: write

jobs:
  RetrieveTargetsMatrix:
    uses: ./.github/workflows/create-matrix.yml

  CreateFamilyLabel:
    needs: RetrieveTargetsMatrix
    strategy:
      matrix: ${{ fromJSON(needs.RetrieveTargetsMatrix.outputs.matrix) }}
      fail-fast: false
    uses: ./.github/workflows/create-label.yml
    with:
      labelname: ${{ matrix.family }}
      color: "FFD200"

  CreateProjectManagementLabel:
    strategy:
      matrix: 
        label: [ missing-devices, dependency-update ]
      fail-fast: false 
    uses: ./.github/workflows/create-label.yml
    with:
      labelname: ${{ matrix.label }}
      color: "03234B"

  UpdateFamilyWithLatestSTReposTags:
    runs-on: ubuntu-latest
    needs: [RetrieveTargetsMatrix, CreateFamilyLabel, CreateProjectManagementLabel]
    strategy:
      matrix: ${{ fromJSON(needs.RetrieveTargetsMatrix.outputs.matrix) }}
      fail-fast: false
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Print Job
        run: echo "Updating ${{ matrix.family }} Family with latest ST tags"

      - name: Get Cube version
        id: get-latest-cube
        uses: './.github/actions/getLatestTag'
        with:
          repository: STMicroelectronics/STM32Cube${{ matrix.family }}

      - name: Get CMSIS version
        id: get-latest-cmsis
        uses: './.github/actions/getLatestTag'
        with:
          repository: STMicroelectronics/cmsis_device_${{ matrix.family }}

      - name: Get HAL version
        id: get-latest-hal
        uses: './.github/actions/getLatestTag'
        with:
          repository: STMicroelectronics/stm32${{ matrix.family }}xx_hal_driver

      - name: Update Cube with latest version
        run: |
          family_src_file=${GITHUB_WORKSPACE}/cmake/stm32/$(echo "${{ matrix.family }}" | tr '[:upper:]' '[:lower:]').cmake
          sed -ri 's@(set\(CUBE_${{ matrix.family }}_VERSION(\s+))(.*)(\))@\1${{ steps.get-latest-cube.outputs.TAG }}\4@g' $family_src_file

      - name: Update CMSIS with latest version
        if: ${{ steps.get-latest-cmsis.outputs.TAG }}
        run: |
          family_src_file=${GITHUB_WORKSPACE}/cmake/stm32/$(echo "${{ matrix.family }}" | tr '[:upper:]' '[:lower:]').cmake
          sed -ri 's@(set\(CMSIS_${{ matrix.family }}_VERSION(\s+))(.*)(\))@\1${{ steps.get-latest-cmsis.outputs.TAG }}\4@g' $family_src_file

      - name: Update HAL with latest version
        if: ${{ steps.get-latest-hal.outputs.TAG }}
        run: |
          family_src_file=${GITHUB_WORKSPACE}/cmake/stm32/$(echo "${{ matrix.family }}" | tr '[:upper:]' '[:lower:]').cmake
          sed -ri 's@(set\(HAL_${{ matrix.family }}_VERSION(\s+))(.*)(\))@\1${{ steps.get-latest-hal.outputs.TAG }}\4@g' $family_src_file

      - name: Create Dependancy update Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          add-paths: cmake/stm32/
          commit-message: Update ${{ matrix.family }} dependencies
          branch: maintenance/${{ matrix.family }}-dependencies-update
          delete-branch: true
          title: Update ${{ matrix.family }} dependencies
          labels: dependency-update, ${{ matrix.family }}
          body: |
            Update ${{ matrix.family }} to use latest ST Repos

  CheckForMissingDevices:
      runs-on: ubuntu-latest
      needs: [RetrieveTargetsMatrix, CreateFamilyLabel, CreateProjectManagementLabel]
      strategy:
        matrix: ${{ fromJSON(needs.RetrieveTargetsMatrix.outputs.matrix) }}
        fail-fast: false
      steps:
        - name: Checkout repo
          uses: actions/checkout@v4
  
        - name: Print Job
          run: echo "Looking for possible missing ${{ matrix.family }} devices"
  
        - name: Get Serie (Family) number from ST website
          id: get-ss-id
          run: |
            FAMILY_L=$(echo "${{ matrix.family }}" | tr '[:upper:]' '[:lower:]')
            URL=https://www.st.com/en/microcontrollers-microprocessors/stm32${FAMILY_L}-series.html
            serie=$(curl --request GET \
              --silent --url ${URL} \
              --header "User-Agent: Firefox/9000" \
              | sed -rne "s@(.*)(data-associated-to=\")(SS[0-9]{4,})(\".*)@\3@p")
            if [ -n ${serie} ]; then
              echo "SERIE=$serie" >> $GITHUB_OUTPUT
            fi
  
        - name: Retrieve Serie (Family) JSON
          id: get-json
          if: ${{ steps.get-ss-id.outputs.SERIE }}
          env:
            SERIE: ${{ steps.get-ss-id.outputs.SERIE }}
          run: |
            URL=https://www.st.com/bin/st/selectors/cxst/en.cxst-ps-grid.html/$SERIE.json
            echo "JSON<<EOF" >> $GITHUB_OUTPUT
            curl --request GET \
              --silent --url ${URL} \
              --header "User-Agent: Firefox/9000" >> data.json
            {
              echo "JSON<<EOF"
              curl --request GET \
                --silent --url ${URL} \
                --header "User-Agent: Firefox/9000"
              echo "EOF"
            } >> $GITHUB_OUTPUT

        - name: Get missing devices list
          id: get-missings
          if: ${{ steps.get-json.outputs.JSON }}
          env:
            SERIE_JSON: ${{ steps.get-json.outputs.JSON }}
          run: |
            FAMILY_L=$(echo "${{ matrix.family }}" | tr '[:upper:]' '[:lower:]')
            family_src_file=${GITHUB_WORKSPACE}/cmake/stm32/${FAMILY_L}.cmake
            echo $SERIE_JSON | jq -r '.rows[].cells[0].value' | while read -r dev; do
              d=${dev#*STM32}
              if [ "0" -eq $(sed -rn "s@(\s+)(${d})@found@p" ${family_src_file} | wc -m) ]; then
                echo "${dev} is missing from ${family_src_file}"
                echo "- [ ] ${d}" >> missings
              else
                echo "${dev} found"
              fi
            done
            if [ -f missings ]; then 
              {
                echo "MISSINGS<<EOF"
                cat missings
                echo "EOF"
              } >> $GITHUB_OUTPUT
            fi

        - name: Check for existing Issue
          id: get-issue-number
          env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            LABELS: ${{ matrix.family }},missing-devices
          run: |
            existing=$(gh issue list \
              --label "${LABELS}" \
              --state open \
              --json number \
              --jq '.[0].number)
            if [ -n ${existing} ]; then
              echo "ISSUE=${existing}" >> $GITHUB_OUTPUT
            fi

        - name: Open an issue for missing devices
          if: ${{ steps.get-missings.outputs.MISSINGS }} && ${{ !steps.get-issue-number.outputs.ISSUE }}
          env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            LABELS: ${{ matrix.family }},missing-devices
          run: |
            echo "Creating issue to report missing devices"
            BODY="Not supported yet devices list: \n $(cat missings)"
            gh issue create \
              --title "${{ matrix.family }} has devices not supported" \
              --label "${LABELS}" \
              --body "$BODY"

        - name: Close the issue as there are no missing devices anymore
          if: ${{ !steps.get-missings.outputs.MISSINGS }} && ${{ steps.get-issue-number.outputs.ISSUE }}
          env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |
            echo "Closing existing issue ${existing}"
            gh issue close "${existing}" \
              --comment "${{ matrix.family }} has all its devices supported now"
