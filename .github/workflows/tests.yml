name: Tests

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  RetrieveTargetsMatrix:
    uses: ./.github/workflows/create-matrix.yml

  Test-fetch:
    runs-on: ubuntu-latest
    needs: RetrieveTargetsMatrix
    strategy:
      matrix: ${{ fromJSON(needs.RetrieveTargetsMatrix.outputs.matrix) }}
      fail-fast: false

    steps:
    - uses: actions/checkout@v4
      
    - uses: ./.github/actions/installToolchain

    - name: Create build directory for tests/fetch
      run: cmake -E make_directory ${{ runner.workspace }}/tests/fetch/build

    - name: Configure tests/fetch
      shell: bash
      working-directory: ${{ runner.workspace }}/tests/fetch/build
      run: cmake -DTEST_FAMILIES=${{ matrix.family }} $GITHUB_WORKSPACE/tests/fetch/

    - name: Create HAL config file from template
      shell: bash
      working-directory: ${{ runner.workspace }}/tests/fetch/build
      run: |
        FAMILY_L=$(echo "${{ matrix.family }}" | tr '[:upper:]' '[:lower:]')
        DEST=stm32${FAMILY_L}xx_hal_conf.h
        HAL_CONF_TEMPLATE=_deps/stm32-hal-${FAMILY_L}-src/Inc/stm32${FAMILY_L}xx_hal_conf_template.h
        HAL_ALT_CONF_TEMPLATE=_deps/stm32-hal-${FAMILY_L}-src/Inc/stm32${FAMILY_L}x_hal_conf_template.h
        CUBE_HAL_CONF_TEMPLATE=_deps/stm32cube${FAMILY_L}-src/Drivers/STM32${{ matrix.family }}xx_HAL_Driver/Inc/stm32${FAMILY_L}xx_hal_conf_template.h
        if [ -f ${HAL_CONF_TEMPLATE} ]; then
          SRC=${HAL_CONF_TEMPLATE}
        elif [ -f ${HAL_ALT_CONF_TEMPLATE} ]; then
          SRC=${HAL_ALT_CONF_TEMPLATE} 
        elif [ -f ${CUBE_HAL_CONF_TEMPLATE} ]; then
          SRC=${CUBE_HAL_CONF_TEMPLATE}
        else
          exit 1
        fi
        cp ${SRC} ${DEST}

    - name: Build tests/fetch
      working-directory: ${{ runner.workspace }}/tests/fetch/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE

  Test-CMSIS:
    runs-on: ubuntu-latest
    needs: RetrieveTargetsMatrix
    strategy:
      matrix: ${{ fromJSON(needs.RetrieveTargetsMatrix.outputs.matrix) }}
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: ./.github/actions/installToolchain

    - name: Create build directory for tests/cmsis
      run: cmake -E make_directory ${{ runner.workspace }}/tests/cmsis/build
      if: ${{ matrix.family != 'MP1' }}

    - name: Configure tests/cmsis
      shell: bash
      working-directory: ${{ runner.workspace }}/tests/cmsis/build
      run: cmake -DTEST_FAMILIES=${{ matrix.family }} -DFETCH_ST_SOURCES=TRUE $GITHUB_WORKSPACE/tests/cmsis/
      if: ${{ matrix.family != 'MP1' }}

    - name: Build tests/cmsis
      working-directory: ${{ runner.workspace }}/tests/cmsis/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE
      if: ${{ matrix.family != 'MP1' }}

  Test-HAL:
    runs-on: ubuntu-latest
    needs: RetrieveTargetsMatrix
    strategy:
      matrix: ${{ fromJSON(needs.RetrieveTargetsMatrix.outputs.matrix) }}
      fail-fast: false

    steps:
    - uses: actions/checkout@v4
    
    - uses: ./.github/actions/installToolchain

    - name: Create build directory for tests/hal
      run: cmake -E make_directory ${{ runner.workspace }}/tests/hal/build

    - name: Configure tests/hal
      shell: bash
      working-directory: ${{ runner.workspace }}/tests/hal/build
      run: cmake -DTEST_FAMILIES=${{ matrix.family }} -DFETCH_ST_SOURCES=TRUE $GITHUB_WORKSPACE/tests/hal/

    - name: Create HAL config file from template
      shell: bash
      working-directory: ${{ runner.workspace }}/tests/hal/build
      run: |
        FAMILY_L=$(echo "${{ matrix.family }}" | tr '[:upper:]' '[:lower:]')
        DEST=stm32${FAMILY_L}xx_hal_conf.h
        HAL_CONF_TEMPLATE=_deps/stm32-hal-${FAMILY_L}-src/Inc/stm32${FAMILY_L}xx_hal_conf_template.h
        HAL_ALT_CONF_TEMPLATE=_deps/stm32-hal-${FAMILY_L}-src/Inc/stm32${FAMILY_L}x_hal_conf_template.h
        CUBE_HAL_CONF_TEMPLATE=_deps/stm32cube${FAMILY_L}-src/Drivers/STM32${{ matrix.family }}xx_HAL_Driver/Inc/stm32${FAMILY_L}xx_hal_conf_template.h
        if [ -f ${HAL_CONF_TEMPLATE} ]; then
          SRC=${HAL_CONF_TEMPLATE}
        elif [ -f ${HAL_ALT_CONF_TEMPLATE} ]; then
          SRC=${HAL_ALT_CONF_TEMPLATE}        
        elif [ -f ${CUBE_HAL_CONF_TEMPLATE} ]; then
          SRC=${CUBE_HAL_CONF_TEMPLATE}
        else
          exit 1
        fi
        cp ${SRC} ${DEST}

    - name: Build tests/hal
      working-directory: ${{ runner.workspace }}/tests/hal/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE
